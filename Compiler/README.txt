TO RUN:
chmod +x run.sh 
./run.sh
./a.out < input.pas
./a.out < input_error.pas
./a.out < input_error_2.pas


### Lexer (.l File)

#### Purpose:
The lexer file (`lexer.l`) is responsible for converting input text into tokens that the parser can understand. It defines rules for matching tokens in the input text.

#### Components:
- **Token Definitions**: Tokens are defined using `%token` directives. Each token represents a distinct unit of meaning in the input language, such as keywords, identifiers, operators, and literals.
- **Regular Expressions**: Regular expressions are used to define patterns for matching tokens in the input text. These patterns are associated with specific tokens using rules defined in the lexer.
- **Auxiliary Functions**: The lexer contains auxiliary functions for initializing the symbol table, searching for symbols, inserting symbols, and handling errors.

#### Operations:
- The lexer initializes the symbol table and hash table.
- It defines a hash function for hashing symbols into buckets in the hash table.
- The lexer searches for symbols in the hash table and linked lists.
- It inserts symbols into the hash table if they are not already present.
- The lexer prints the hash table and linked lists for debugging and error handling purposes.

### Parser (.y File)

#### Purpose:
The parser file (`parser.y`) defines the grammar rules for the input language and specifies actions to be taken when each rule is recognized. It generates a syntax tree from the input text.

#### Components:
- **Token Definitions**: Tokens are declared using `%token` directives. These tokens are generated by the lexer and represent lexical units in the input text.
- **Union Declaration**: The `%union` directive defines a union type that can hold different types of data, such as integers, floats, and identifiers.
- **Grammar Rules**: The parser specifies the grammar rules for the input language using context-free grammar (CFG) notation. Each rule consists of a non-terminal symbol followed by a production.
- **Semantic Actions**: Semantic actions are embedded within the grammar rules and specify the actions to be taken when a particular rule is recognized. These actions include symbol table operations, error handling, and type checking.

#### Operations:
- The parser initializes the symbol table and hash table.
- It defines grammar rules for the input language, including declarations, assignments, expressions, loops, and input/output operations.
- Semantic actions within the grammar rules perform symbol table operations, type checking, error handling, and code generation.
- The parser generates a syntax tree and executes actions based on the recognized grammar rules.

### README (eg readme)

#### Purpose:
The README file provides an overview of the lexer and parser files, including their purpose, components, operations, and usage instructions. It also describes the input files provided for testing and any assumptions made during error detection and handling.

#### Contents:
- **Overview**: Brief description of the lexer and parser files.
- **Lexer**: Description of the lexer file, including its purpose, components, and operations.
- **Parser**: Description of the parser file, including its purpose, components, and operations.
- **Usage**: Instructions for running the lexer and parser, along with examples of input files.
- **Errors**: Description of the semantic errors handled by the parser, along with assumptions made during error detection and handling.
- **Input Files**: Description of the input files provided for testing, including sample code and expected output.

#### Example Contents:
- **Overview**: Introduction to the lexer and parser.
- **Lexer**: Explanation of token definitions, regular expressions, and auxiliary functions.
- **Parser**: Explanation of token definitions, union declaration, grammar rules, and semantic actions.
- **Usage**: Instructions for running the lexer and parser, along with examples.
- **Errors**: Description of semantic errors handled and assumptions made.
- **Input Files**: Description of provided input files and their contents.


## Errors
The parser handles semantic errors including:
- Duplicate declaration
- Missing declaration
- Missing initialization
- Type mismatch

## Input Files
- `input.pas`: Sample input code
- `input_error.pas`: Input code with semantic errors
- `input_error_2.pas`: Another input code with semantic errors

```
